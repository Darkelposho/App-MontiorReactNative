{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { DataStyles } from \"../theme/appTheme\";\nimport { getDistance } from 'geolib';\nimport { useLocation } from \"../hooks/useLocation\";\nexport var ClimateData = function ClimateData(_ref) {\n  var channel = _ref.channel,\n      feeds = _ref.feeds;\n\n  var _useLocation = useLocation(),\n      location = _useLocation.location,\n      errorMsg = _useLocation.errorMsg;\n\n  var text = 'Waiting..';\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  var showAlert = function showAlert() {\n    return _regeneratorRuntime.async(function showAlert$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Alert.alert('Costa Peligrosa', 'Dirigase a un lugar seguro', [{\n              text: 'Cancel',\n              onPress: function onPress() {\n                return console.log('Cancel Pressed');\n              },\n              style: 'cancel'\n            }, {\n              text: 'OK',\n              onPress: function onPress() {\n                return console.log('OK Pressed');\n              }\n            }], {\n              cancelable: false\n            }));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  var calculateDistance = function calculateDistance() {\n    var dis = getDistance({\n      latitude: channel.latitude,\n      longitude: channel.longitude\n    }, {\n      latitude: location.latitude,\n      longitude: location.longitude\n    });\n    return dis / 1000;\n  };\n\n  if (parseFloat(feeds.field3) >= 15 || parseFloat(feeds.field3) <= 9) {\n    showAlert();\n  }\n\n  return React.createElement(View, {\n    style: DataStyles.globalMargin\n  }, React.createElement(View, {\n    style: DataStyles.channelData\n  }, React.createElement(Text, {\n    style: DataStyles.title\n  }, channel.description), React.createElement(Text, {\n    style: DataStyles.title\n  }, \"Distancia del equipo: \", calculateDistance(), \" Km\")), React.createElement(View, {\n    style: DataStyles.feedData\n  }, React.createElement(View, {\n    style: DataStyles.Temp_container\n  }, React.createElement(Text, {\n    style: DataStyles.feedDataText\n  }, \"Temperatura: \", feeds.field5, \"\\xB0C\")), React.createElement(View, null, React.createElement(Text, {\n    style: DataStyles.feedDataText\n  }, \"Humedad: \", feeds.field6, \"%\")), React.createElement(View, null, React.createElement(Text, {\n    style: DataStyles.feedDataText\n  }, \"Nivel de Agua Promedio: \", feeds.field3, \" Cm\")), React.createElement(View, null, React.createElement(Text, {\n    style: DataStyles.feedDataText\n  }, \"Vientos: \", feeds.field4, \" Km/h\"))));\n};","map":{"version":3,"sources":["C:/Users/Memo/Documents/TicsExpo/definitivo/MonitoreoDeClimaCostero/ExpoTics/src/components/ClimateData.tsx"],"names":["React","DataStyles","getDistance","useLocation","ClimateData","channel","feeds","location","errorMsg","text","JSON","stringify","showAlert","Alert","alert","onPress","console","log","style","cancelable","calculateDistance","dis","latitude","longitude","parseFloat","field3","globalMargin","channelData","title","description","feedData","Temp_container","feedDataText","field5","field6","field4"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Channel, Feed } from '../interfaces/ClimateInterface';\r\nimport { Alert, Text, View } from 'react-native';\r\nimport { DataStyles, styles } from '../theme/appTheme';\r\nimport { getDistance } from 'geolib';\r\nimport { useLocation } from '../hooks/useLocation';\r\n\r\n\r\ninterface ClimateDataProps { \r\n    channel: Channel;\r\n    feeds: Feed;\r\n}\r\n\r\nexport const ClimateData = ({channel, feeds}: ClimateDataProps) => {\r\n\r\n    const {location, errorMsg} = useLocation();\r\n    \r\n    let text = 'Waiting..';\r\n    if (errorMsg) {\r\n        text = errorMsg;\r\n    } else if (location) {\r\n        text = JSON.stringify(location);\r\n    }\r\n\r\n    const showAlert = async () => {\r\n        try{\r\n            await Alert.alert(\r\n                'Costa Peligrosa',\r\n                'Dirigase a un lugar seguro',\r\n                [\r\n                    {\r\n                        text: 'Cancel',\r\n                        onPress: () => console.log('Cancel Pressed'),\r\n                        style: 'cancel',\r\n                    },\r\n                    { text: 'OK', onPress: () => console.log('OK Pressed') },\r\n                ],\r\n                { cancelable: false },\r\n            );\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n    const calculateDistance = () => {\r\n        var dis = getDistance(\r\n            { latitude: channel.latitude, longitude: channel.longitude },\r\n            { latitude: location.latitude , longitude: location.longitude }   \r\n          );\r\n        return dis/1000;\r\n    }\r\n\r\n\r\n    if (parseFloat(feeds.field3)>=15 || parseFloat(feeds.field3)<=9) {\r\n        showAlert();\r\n    }\r\n\r\n    return (\r\n        <View style = {DataStyles.globalMargin}> \r\n            <View style = {DataStyles.channelData}>\r\n                <Text style={DataStyles.title}>{channel.description}</Text>\r\n                <Text style={DataStyles.title}>Distancia del equipo: {calculateDistance()} Km</Text>\r\n            </View>\r\n            <View style = {DataStyles.feedData}>\r\n                <View style={DataStyles.Temp_container}>\r\n                    <Text style={DataStyles.feedDataText}>Temperatura: {feeds.field5}Â°C</Text> \r\n                </View>\r\n                <View>\r\n                    <Text style={DataStyles.feedDataText}>Humedad: {feeds.field6}%</Text> \r\n                </View>\r\n                <View>\r\n                    <Text style={DataStyles.feedDataText}>Nivel de Agua Promedio: {feeds.field3} Cm</Text>\r\n                </View>\r\n                <View>\r\n                    <Text style={DataStyles.feedDataText}>Vientos: {feeds.field4} Km/h</Text>\r\n                </View>\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}