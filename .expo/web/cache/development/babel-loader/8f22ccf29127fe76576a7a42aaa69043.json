{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { styles } from \"../theme/appTheme\";\nimport { getDistance } from 'geolib';\nimport { useLocation } from \"../hooks/useLocation\";\nimport moment from 'moment';\nexport var ClimateData = function ClimateData(_ref) {\n  var channel = _ref.channel,\n      feeds = _ref.feeds;\n\n  var _useLocation = useLocation(),\n      location = _useLocation.location,\n      errorMsg = _useLocation.errorMsg;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var text = 'Waiting..';\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  var showAlert = function showAlert() {\n    return _regeneratorRuntime.async(function showAlert$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Alert.alert('Costa Peligrosa', 'Dirigase a un lugar seguro', [{\n              text: 'OK',\n              onPress: function onPress() {\n                return console.log('OK Pressed');\n              }\n            }], {\n              cancelable: false\n            }));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  useEffect(function () {\n    setCount(false);\n\n    if (parseFloat(feeds.field3) >= 15 || parseFloat(feeds.field3) <= 9) {\n      showAlert();\n    }\n  }, []);\n\n  var calculateDistance = function calculateDistance() {\n    var dis = getDistance({\n      latitude: channel.latitude,\n      longitude: channel.longitude\n    }, {\n      latitude: location.latitude,\n      longitude: location.longitude\n    });\n    return dis / 1000;\n  };\n\n  var date = function date(dateStr) {\n    var date = new Date(dateStr).getTime();\n    return date;\n  };\n\n  var isDate = function isDate(dateStr) {\n    var newDate = moment(new Date(dateStr * 1000)).format('MM/DD/YYYY hh:MM');\n    return newDate;\n  };\n\n  return React.createElement(ScrollView, {\n    style: [styles.menuContainer, {\n      paddingTop: top\n    }]\n  });\n};","map":{"version":3,"sources":["C:/Users/Memo/Documents/TicsExpo/definitivo/MonitoreoDeClimaCostero/ExpoTics/src/components/ClimateData.tsx"],"names":["React","useEffect","useState","styles","getDistance","useLocation","moment","ClimateData","channel","feeds","location","errorMsg","count","setCount","text","JSON","stringify","showAlert","Alert","alert","onPress","console","log","cancelable","parseFloat","field3","calculateDistance","dis","latitude","longitude","date","dateStr","Date","getTime","isDate","newDate","format","menuContainer","paddingTop","top"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;;;AAGA,SAAqBC,MAArB;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,WAAT;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AAOA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAwC;AAAA,MAAtCC,OAAsC,QAAtCA,OAAsC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;;AAE/D,qBAA6BJ,WAAW,EAAxC;AAAA,MAAOK,QAAP,gBAAOA,QAAP;AAAA,MAAiBC,QAAjB,gBAAiBA,QAAjB;;AAEA,kBAA0BT,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOU,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAIC,IAAI,GAAG,WAAX;;AACA,MAAIH,QAAJ,EAAc;AACVG,IAAAA,IAAI,GAAGH,QAAP;AACH,GAFD,MAEO,IAAID,QAAJ,EAAc;AACjBI,IAAAA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAP;AACH;;AACD,MAAMO,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEJC,KAAK,CAACC,KAAN,CACF,iBADE,EAEF,4BAFE,EAGF,CACI;AAAEL,cAAAA,IAAI,EAAE,IAAR;AAAcM,cAAAA,OAAO,EAAE;AAAA,uBAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAA;AAAvB,aADJ,CAHE,EAMF;AAAEC,cAAAA,UAAU,EAAE;AAAd,aANE,CAFI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWVF,YAAAA,OAAO,CAACC,GAAR;;AAXU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAeArB,EAAAA,SAAS,CAAC,YAAM;AAGZY,IAAAA,QAAQ,CAAC,KAAD,CAAR;;AAEA,QAAIW,UAAU,CAACf,KAAK,CAACgB,MAAP,CAAV,IAA0B,EAA1B,IAAgCD,UAAU,CAACf,KAAK,CAACgB,MAAP,CAAV,IAA0B,CAA9D,EAAgE;AAC5DR,MAAAA,SAAS;AACZ;AAEF,GATM,EASJ,EATI,CAAT;;AAYA,MAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,QAAIC,GAAG,GAAGvB,WAAW,CACjB;AAAEwB,MAAAA,QAAQ,EAAEpB,OAAO,CAACoB,QAApB;AAA8BC,MAAAA,SAAS,EAAErB,OAAO,CAACqB;AAAjD,KADiB,EAEjB;AAAED,MAAAA,QAAQ,EAAElB,QAAQ,CAACkB,QAArB;AAAgCC,MAAAA,SAAS,EAAEnB,QAAQ,CAACmB;AAApD,KAFiB,CAArB;AAIA,WAAOF,GAAG,GAAC,IAAX;AACH,GAND;;AAQA,MAAMG,IAAI,GAAG,cAACC,OAAD,EAAqB;AAC9B,QAAID,IAAI,GAAG,IAAIE,IAAJ,CAASD,OAAT,EAAkBE,OAAlB,EAAX;AAEA,WAAOH,IAAP;AACH,GAJD;;AAMA,MAAMI,MAAM,GAAG,SAATA,MAAS,CAACH,OAAD,EAAqB;AAChC,QAAII,OAAO,GAAG7B,MAAM,CAAC,IAAI0B,IAAJ,CAASD,OAAO,GAAG,IAAnB,CAAD,CAAN,CAAiCK,MAAjC,CAAwC,kBAAxC,CAAd;AAEA,WAAOD,OAAP;AACH,GAJD;;AAMA,SACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE,CAAChC,MAAM,CAACkC,aAAR,EAAuB;AAACC,MAAAA,UAAU,EAAEC;AAAb,KAAvB;AAAnB,IADJ;AAMH,CAjEM","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\r\nimport { Channel, Feed } from '../interfaces/ClimateInterface';\r\nimport { Alert, Text, View, ScrollView, SafeAreaView } from 'react-native';\r\nimport { DataStyles, styles } from '../theme/appTheme';\r\nimport { getDistance } from 'geolib';\r\nimport { useLocation } from '../hooks/useLocation';\r\nimport { Ionicons, FontAwesome5, Feather } from '@expo/vector-icons'; \r\nimport moment from 'moment';\r\n\r\ninterface ClimateDataProps { \r\n    channel: Channel;\r\n    feeds: Feed;\r\n}\r\n\r\nexport const ClimateData = ({channel, feeds}: ClimateDataProps) => {\r\n\r\n    const {location, errorMsg} = useLocation();\r\n\r\n    const [count, setCount] = useState(true);\r\n\r\n    let text = 'Waiting..';\r\n    if (errorMsg) {\r\n        text = errorMsg;\r\n    } else if (location) {\r\n        text = JSON.stringify(location);\r\n    }\r\n    const showAlert = async () => {\r\n        try{\r\n            await Alert.alert(\r\n                'Costa Peligrosa',\r\n                'Dirigase a un lugar seguro',\r\n                [\r\n                    { text: 'OK', onPress: () => console.log('OK Pressed') },\r\n                ],\r\n                { cancelable: false },\r\n            );\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n \r\n        // Set the count variable value to Zero.\r\n        setCount(false);\r\n     \r\n        if (parseFloat(feeds.field3)>=15 || parseFloat(feeds.field3)<=9){\r\n            showAlert();\r\n        }\r\n     \r\n      }, [] );\r\n    \r\n    \r\n    const calculateDistance = () => {\r\n        var dis = getDistance(\r\n            { latitude: channel.latitude, longitude: channel.longitude },\r\n            { latitude: location.latitude , longitude: location.longitude }   \r\n          );\r\n        return dis/1000;\r\n    }\r\n\r\n    const date = (dateStr: string) => {\r\n        var date = new Date(dateStr).getTime();\r\n        /* console.log(date); */\r\n        return date     \r\n    }\r\n\r\n    const isDate = (dateStr: number) => {\r\n        var newDate = moment(new Date(dateStr * 1000)).format('MM/DD/YYYY hh:MM');\r\n        /* console.log(newDate); */\r\n        return newDate;\r\n    }\r\n\r\n    return (\r\n        <ScrollView style={[styles.menuContainer, {paddingTop: top}]}>\r\n\r\n        </ScrollView>\r\n        \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}