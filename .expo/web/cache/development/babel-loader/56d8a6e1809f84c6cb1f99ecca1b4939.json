{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from 'react';\nimport climateApi from \"../api/climateApi\";\nimport { useEffect } from 'react';\nvar FeedProps = {\n  created_at: \"\",\n  entry_id: 0,\n  field1: \"\",\n  field2: \"\",\n  field3: \"\",\n  field4: \"\",\n  field5: \"\",\n  field6: \"\"\n};\nvar ChanelProps = {\n  id: 0,\n  name: \"\",\n  description: \"\",\n  latitude: \"\",\n  longitude: \"\",\n  field1: \"\",\n  field2: \"\",\n  field3: \"\",\n  field4: \"\",\n  field5: \"\",\n  field6: \"\",\n  created_at: \"\",\n  updated_at: \"\",\n  last_entry_id: 0\n};\nexport var useClimate = function useClimate() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState([FeedProps]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      feed = _useState4[0],\n      setFeed = _useState4[1];\n\n  var _useState5 = useState(ChanelProps),\n      _useState6 = _slicedToArray(_useState5, 2),\n      channel = _useState6[0],\n      setChannel = _useState6[1];\n\n  var getClimate = function getClimate() {\n    var response;\n    return _regeneratorRuntime.async(function getClimate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(climateApi.get(\"/\"));\n\n          case 2:\n            response = _context.sent;\n            setFeed(response.data.feeds);\n            setChannel(response.data.channel);\n            setIsLoading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getClimate();\n  }, []);\n  return {\n    feed: feed,\n    channel: channel,\n    isLoading: isLoading\n  };\n};","map":{"version":3,"sources":["C:/Users/Memo/Documents/TicsExpo/definitivo/MonitoreoDeClimaCostero/ExpoTics/src/hooks/useClimate.tsx"],"names":["useState","climateApi","useEffect","FeedProps","created_at","entry_id","field1","field2","field3","field4","field5","field6","ChanelProps","id","name","description","latitude","longitude","updated_at","last_entry_id","useClimate","isLoading","setIsLoading","feed","setFeed","channel","setChannel","getClimate","get","response","data","feeds"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP;AAEA,SAASC,SAAT,QAA0B,OAA1B;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,QAAQ,EAAI,CAFE;AAGdC,EAAAA,MAAM,EAAM,EAHE;AAIdC,EAAAA,MAAM,EAAM,EAJE;AAKdC,EAAAA,MAAM,EAAM,EALE;AAMdC,EAAAA,MAAM,EAAM,EANE;AAOdC,EAAAA,MAAM,EAAM,EAPE;AAQdC,EAAAA,MAAM,EAAM;AARE,CAAlB;AAWA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAa,CADC;AAEhBC,EAAAA,IAAI,EAAW,EAFC;AAGhBC,EAAAA,WAAW,EAAI,EAHC;AAIhBC,EAAAA,QAAQ,EAAO,EAJC;AAKhBC,EAAAA,SAAS,EAAM,EALC;AAMhBX,EAAAA,MAAM,EAAS,EANC;AAOhBC,EAAAA,MAAM,EAAS,EAPC;AAQhBC,EAAAA,MAAM,EAAS,EARC;AAShBC,EAAAA,MAAM,EAAS,EATC;AAUhBC,EAAAA,MAAM,EAAS,EAVC;AAWhBC,EAAAA,MAAM,EAAS,EAXC;AAYhBP,EAAAA,UAAU,EAAK,EAZC;AAahBc,EAAAA,UAAU,EAAK,EAbC;AAchBC,EAAAA,aAAa,EAAE;AAdC,CAApB;AAiBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B,kBAAkCpB,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOqB,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAwBtB,QAAQ,CAAS,CAACG,SAAD,CAAT,CAAhC;AAAA;AAAA,MAAOoB,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BxB,QAAQ,CAAUY,WAAV,CAAtC;AAAA;AAAA,MAAOa,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQ1B,UAAU,CAAC2B,GAAX,CAAwB,GAAxB,CADR;;AAAA;AACTC,YAAAA,QADS;AAEfL,YAAAA,OAAO,CAACK,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAP;AACAL,YAAAA,UAAU,CAACG,QAAQ,CAACC,IAAT,CAAcL,OAAf,CAAV;AAEAH,YAAAA,YAAY,CAAC,KAAD,CAAZ;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAOApB,EAAAA,SAAS,CAAC,YAAM;AACZyB,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AACHJ,IAAAA,IAAI,EAAJA,IADG;AAEHE,IAAAA,OAAO,EAAPA,OAFG;AAGHJ,IAAAA,SAAS,EAATA;AAHG,GAAP;AAKH,CArBM","sourcesContent":["import { useState } from 'react'\r\nimport climateApi from '../api/climateApi';\r\nimport { Channel, Climate, Feed } from '../interfaces/ClimateInterface';\r\nimport { useEffect } from 'react';\r\n\r\nconst FeedProps = {\r\n    created_at: \"\",\r\n    entry_id:   0,\r\n    field1:     \"\",\r\n    field2:     \"\",\r\n    field3:     \"\",\r\n    field4:     \"\",\r\n    field5:     \"\",\r\n    field6:     \"\"\r\n}\r\n\r\nconst ChanelProps = {\r\n    id:            0,   \r\n    name:          \"\",\r\n    description:   \"\",\r\n    latitude:      \"\",\r\n    longitude:     \"\",\r\n    field1:        \"\",\r\n    field2:        \"\",\r\n    field3:        \"\",\r\n    field4:        \"\",\r\n    field5:        \"\",\r\n    field6:        \"\",\r\n    created_at:    \"\",\r\n    updated_at:    \"\",\r\n    last_entry_id: 0\r\n}\r\n\r\nexport const useClimate = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [feed, setFeed] = useState<Feed[]>([FeedProps]);\r\n    const [channel, setChannel] = useState<Channel>(ChanelProps);\r\n\r\n    const getClimate = async () => {\r\n        const response = await climateApi.get<Climate>(\"/\");\r\n        setFeed(response.data.feeds);\r\n        setChannel(response.data.channel);\r\n\r\n        setIsLoading(false);\r\n    }\r\n    useEffect(() => {\r\n        getClimate();\r\n    }, []);\r\n\r\n    return {\r\n        feed,\r\n        channel,\r\n        isLoading\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}