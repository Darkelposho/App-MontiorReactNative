{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar baseURL = \"http://localhost:5000/api/login\";\nvar loginApi = axios.create({\n  baseURL: baseURL\n});\nloginApi.interceptors.request.use(function _callee(config) {\n  var token;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n\n        case 2:\n          token = _context.sent;\n\n          if (token) {\n            config.headers['x-token'] = token;\n          }\n\n          return _context.abrupt(\"return\", config);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default loginApi;","map":{"version":3,"sources":["C:/Users/Memo/Documents/TicsExpo/MonitoreoDeClimaCostero/ExpoTics/src/api/loginApi.tsx"],"names":["axios","AsyncStorage","baseURL","loginApi","create","interceptors","request","use","config","getItem","token","headers","error","Promise","reject"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,IAAMC,OAAO,GAAG,iCAAhB;AAEA,IAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAACF,EAAAA,OAAO,EAAPA;AAAD,CAAb,CAAjB;AAEAC,QAAQ,CAACE,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACI,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACwBP,YAAY,CAACQ,OAAb,CAAqB,OAArB,CADxB;;AAAA;AACUC,UAAAA,KADV;;AAEI,cAAIA,KAAJ,EAAW;AACPF,YAAAA,MAAM,CAACG,OAAP,CAAe,SAAf,IAA4BD,KAA5B;AACH;;AAJL,2CAKWF,MALX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADJ,EAQI,UAACI,KAAD,EAAW;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAVL;AAaA,eAAeT,QAAf","sourcesContent":["import axios from \"axios\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nconst baseURL = \"http://localhost:5000/api/login\";\r\n\r\nconst loginApi = axios.create({baseURL});\r\n\r\nloginApi.interceptors.request.use(\r\n    async (config) => {\r\n        const token = await AsyncStorage.getItem(\"token\");\r\n        if (token) {\r\n            config.headers['x-token'] = token;\r\n        }   \r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default loginApi;"]},"metadata":{},"sourceType":"module"}