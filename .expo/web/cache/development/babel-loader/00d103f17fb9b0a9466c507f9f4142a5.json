{"ast":null,"code":"import React, { useContext, useEffect } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput, TouchableOpacity } from 'react-native-gesture-handler';\nimport { Backgound } from \"../components/Backgound\";\nimport { Logo } from \"../components/Logo\";\nimport { loginStyles } from \"../theme/appTheme\";\nimport { useForm } from \"../hooks/useForm\";\nimport { AuthContext } from \"../context/AuthContext\";\n;\nexport var LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AuthContext),\n      signIn = _useContext.signIn,\n      errorMessage = _useContext.errorMessage,\n      removeError = _useContext.removeError;\n\n  var _useForm = useForm({\n    email: '',\n    password: ''\n  }),\n      email = _useForm.email,\n      password = _useForm.password,\n      onChange = _useForm.onChange;\n\n  useEffect(function () {\n    if (errorMessage.length === 0) return;\n    Alert.alert('Login Incorrecto', errorMessage, [{\n      text: 'Ok',\n      onPress: removeError\n    }]);\n  }, [errorMessage]);\n\n  var onLoginPress = function onLoginPress() {\n    console.log({\n      email: email,\n      password: password\n    });\n    Keyboard.dismiss();\n    signIn({\n      email: email,\n      password: password\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Backgound, null), React.createElement(KeyboardAvoidingView, {\n    style: loginStyles.container,\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height'\n  }, React.createElement(Logo, null), React.createElement(Text, {\n    style: loginStyles.title\n  }, \"Inicio de sesion\"), React.createElement(Text, {\n    style: loginStyles.label\n  }, \"Email:\"), React.createElement(TextInput, {\n    style: loginStyles.input,\n    placeholder: \"Ingrese su email:\",\n    placeholderTextColor: \"white\",\n    underlineColorAndroid: \"white\",\n    onChangeText: function onChangeText(text) {\n      return onChange(text, 'email');\n    },\n    value: email,\n    selectionColor: \"white\",\n    onSubmitEditing: onLoginPress,\n    autoCapitalize: \"none\",\n    autoCorrect: false\n  }), React.createElement(Text, {\n    style: loginStyles.label\n  }, \"Contrase\\xF1a:\"), React.createElement(TextInput, {\n    style: loginStyles.input,\n    placeholder: \"******\",\n    placeholderTextColor: \"white\",\n    underlineColorAndroid: \"white\",\n    secureTextEntry: true,\n    onChangeText: function onChangeText(text) {\n      return onChange(text, 'password');\n    },\n    value: password,\n    selectionColor: \"white\",\n    onSubmitEditing: onLoginPress,\n    autoCapitalize: \"none\",\n    autoCorrect: false\n  }), React.createElement(View, {\n    style: loginStyles.buttonContainer\n  }, React.createElement(TouchableOpacity, {\n    style: loginStyles.button,\n    onPress: function onPress() {\n      return navigation.navigate('MenuScreen');\n    }\n  }, React.createElement(Text, {\n    style: loginStyles.buttonText\n  }, \"Iniciar Sesion\"))), React.createElement(View, {\n    style: loginStyles.buttonContainer\n  }, React.createElement(TouchableOpacity, {\n    style: loginStyles.button,\n    onPress: function onPress() {\n      return navigation.replace('RegisterScreen');\n    }\n  }, React.createElement(Text, {\n    style: loginStyles.buttonText\n  }, \"Nueva Cuenta\")))));\n};","map":{"version":3,"sources":["C:/Users/Memo/Documents/TicsExpo/MonitoreoDeClimaCostero/ExpoTics/src/screens/LoginScreen.tsx"],"names":["React","useContext","useEffect","TextInput","TouchableOpacity","Backgound","Logo","loginStyles","useForm","AuthContext","LoginScreen","navigation","signIn","errorMessage","removeError","email","password","onChange","length","Alert","alert","text","onPress","onLoginPress","console","log","Keyboard","dismiss","container","Platform","OS","title","label","input","buttonContainer","button","navigate","buttonText","replace"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react'\r\nimport { Alert, Keyboard, KeyboardAvoidingView, Platform, Text, View } from 'react-native';\r\nimport { TextInput, TouchableOpacity } from 'react-native-gesture-handler';\r\nimport { Backgound } from '../components/Backgound';\r\nimport { Logo } from '../components/Logo';\r\nimport { loginStyles } from '../theme/appTheme';\r\nimport { useForm } from '../hooks/useForm';\r\nimport { StackScreenProps } from '@react-navigation/stack';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\n\r\ninterface Props extends StackScreenProps<any, any>{};\r\n\r\nexport const LoginScreen = ({ navigation }: Props ) => {\r\n\r\n    const{signIn, errorMessage, removeError} = useContext(AuthContext);\r\n\r\n    const {email, password, onChange} = useForm ({\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(errorMessage.length === 0) return;\r\n\r\n        Alert.alert('Login Incorrecto', errorMessage, [{\r\n            text: 'Ok', \r\n            onPress:  removeError\r\n        }]);\r\n\r\n    }, [errorMessage]);\r\n\r\n\r\n    const onLoginPress = () => {\r\n        /* navigation.navigate('MenuScreen'); */\r\n        console.log({email, password});\r\n        Keyboard.dismiss();\r\n\r\n        signIn({email, password});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* Background */}\r\n            <Backgound/>\r\n\r\n            <KeyboardAvoidingView \r\n                style={loginStyles.container} \r\n                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>\r\n                {/* Keyboard avoid view */}\r\n                <Logo/>\r\n                <Text style={ loginStyles.title }>Inicio de sesion</Text>\r\n\r\n                <Text style={ loginStyles.label }>Email:</Text>\r\n                <TextInput style={loginStyles.input} \r\n                    placeholder=\"Ingrese su email:\" \r\n                    placeholderTextColor=\"white\" \r\n                    underlineColorAndroid=\"white\"\r\n                    onChangeText={(text) => onChange(text, 'email')}\r\n                    value={email}\r\n                    selectionColor=\"white\"\r\n                    onSubmitEditing={onLoginPress}\r\n                    autoCapitalize=\"none\"\r\n                    autoCorrect={false}\r\n                />\r\n                <Text style={ loginStyles.label }>Contrase√±a:</Text>\r\n                <TextInput \r\n                    style={loginStyles.input} \r\n                    placeholder=\"******\" \r\n                    placeholderTextColor=\"white\" \r\n                    underlineColorAndroid=\"white\"\r\n                    secureTextEntry={true}\r\n                    onChangeText={(text) => onChange(text, 'password')}\r\n                    value={password}\r\n                    selectionColor=\"white\"\r\n                    onSubmitEditing={onLoginPress}\r\n                    autoCapitalize=\"none\"\r\n                    autoCorrect={false}\r\n                />\r\n                <View style={loginStyles.buttonContainer}>\r\n                    <TouchableOpacity \r\n                        style={loginStyles.button} \r\n                        onPress={() => navigation.navigate('MenuScreen')} \r\n                        /* onPress={onLoginPress} */\r\n                    >\r\n                        <Text style={loginStyles.buttonText}>Iniciar Sesion</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                <View style={loginStyles.buttonContainer}>\r\n                    <TouchableOpacity \r\n                        style={loginStyles.button} \r\n                        onPress={() => navigation.replace('RegisterScreen') }\r\n                    >\r\n                        <Text style={loginStyles.buttonText}>Nueva Cuenta</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n                \r\n            </KeyboardAvoidingView>\r\n\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}